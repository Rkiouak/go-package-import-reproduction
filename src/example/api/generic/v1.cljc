;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package example.api.generic.v1
;;;----------------------------------------------------------------------------------
(ns example.api.generic.v1
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [ :as ]
            [com.google.protobuf :as com.google.protobuf]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->Bar)
(declare ecis->Bar)
(declare new-Bar)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Bar
;-----------------------------------------------------------------------------
(defrecord Bar-record [foo]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 1 (:foo this) os))
  pb/TypeReflection
  (gettype [this]
    "example.api.generic.v1.Bar"))

(s/def ::Bar-spec (s/keys :opt-un []))
(def Bar-defaults {})

(defn cis->Bar
  "CodedInputStream to Bar"
  [is]
  (->> (tag-map Bar-defaults
         (fn [tag index]
             (case index
               1 [:foo (/ecis->Foo is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Bar-record)))

(defn ecis->Bar
  "Embedded CodedInputStream to Bar"
  [is]
  (serdes.core/cis->embedded cis->Bar is))

(defn new-Bar
  "Creates a new instance from a map, similar to map->Bar except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Bar-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Bar-spec init))))]}
  (-> (merge Bar-defaults init)
      (cond-> (contains? init :foo) (update :foo /new-Foo))
      (map->Bar-record)))

(defn pb->Bar
  "Protobuf to Bar"
  [input]
  (cis->Bar (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Bar-meta {:type "example.api.generic.v1.Bar" :decoder pb->Bar})

